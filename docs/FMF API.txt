# API Formats

Api formats are defined in app/serializers

# API ENDPOINTS


Accepts  Verb     URI Pattern                                                   Controller#Action

 JSON    POST     /users(.:format)                                              users/registrations#create

  Creates new user

 JSON    PUT      /users(.:format)                                              users/registrations#update

  Updates a user

 FORM    GET|POST /users/auth/:provider(.:format)                               users/omniauth_callbacks#passthru {:provider=>/facebook|facebook_access_token/}

  Handles facebook login

 FORM    GET|POST /users/auth/:action/callback(.:format)                        users/omniauth_callbacks#(?-mix:facebook|facebook_access_token)

  Redirect url for oauth

         GET      /users(.:format)                                              users#index

  Get the current user's representation

         GET      /pages/mobile/forgot_password(.:format)                       mobile_pages#forgot_password

  HTML form for resetting password

         GET      /pages/mobile/support(.:format)                               mobile_pages#support

  HTML page for support

         GET      /pages/mobile/terms(.:format)                                 mobile_pages#terms

  HTML page for terms

         GET      /pages/mobile/rules(.:format)                                 mobile_pages#rules

  HTML page for rules

         GET      /join_contest/:invitation_code(.:format)                      contests#join

  Join a contest link with an invitation code

 FORM    POST     /users/agree_to_terms(.:format)                               users#agree_to_terms

  Update a user to agree to new subscription terms

         GET      /users/name_taken(.:format)                                   users#name_taken

  Check if a username is taken

 FORM    POST     /users/set_username(.:format)                                 users#set_username

  Set the authenticated users username

 FORM    POST     /users/reset_password(.:format)                               users#reset_password

  Reset the users password

         GET      /users(.:format)                                              users#index

  Get the current user's representation

         GET      /users/:id(.:format)                                          users#show

  Get another user's representation

 FORM    POST     /rosters/enter_league/:league_id(.:format)                    rosters#create_league_entry

  Join a league, get a roster for the league

         GET      /rosters/mine(.:format)                                       rosters#mine

  Get my list of current rosters.  Also can get historical rosters

         GET      /rosters/past_stats(.:format)                                 rosters#past_stats

  Fetch past roster statistics

         GET      /rosters/in_contest/:contest_id(.:format)                     rosters#in_contest

  List rosters in a contest. Effectively a leaderboard.

         GET      /rosters/public/:view_code(.:format)                          rosters#public_roster

  List rosters in a contest. Effectively a leaderboard.

         GET      /rosters/sample(.:format)                                     rosters#sample_roster

  Fetch an example autogenerated roster (for public landing)

 FORM    POST     /rosters/:id/submit(.:format)                                 rosters#submit

  Submit a roster into a contest

 FORM    POST     /rosters/:id/toggle_remove_bench(.:format)                    rosters#toggle_remove_bench

  Toggle an option for automatically removing benched players from their roster

 FORM    POST     /rosters/:id/autofill(.:format)                               rosters#autofill

  Fill a roster algorithmically

 FORM    POST     /rosters/:id/add_player/:player_id/:position(.:format)        rosters#add_player

  Add a player to a roster

 FORM    POST     /rosters/:id/remove_player/:player_id(.:format)               rosters#remove_player

  Remove a player from a roster

 FORM    POST     /rosters/:id/share(.:format)                                  rosters#share

  Report that a roster was shared

 JSON    POST     /rosters(.:format)                                            rosters#create

  Create a roster

         GET      /rosters/:id(.:format)                                        rosters#show

  Get the representation of a roster

 JSON    DELETE   /rosters/:id(.:format)                                        rosters#destroy

  Delete a roster

         GET      /transactions(.:format)                                       transaction_record#index

  List Transactions

 FORM    POST     /contests/join(.:format)                                      contests#join

  Join a contest

 FORM    POST     /contests/:id/invite(.:format)                                contests#invite

  Invite emails to a contest

 FORM    POST     /contests(.:format)                                           contests#create

  Create a new contest

         GET      /games/for_market/:id(.:format)                               games#for_market

  List the games in a market

         GET      /games/:id(.:format)                                          games#show

  Get the representation for a game

         GET      /players/mine(.:format)                                       players#mine

  Fetch players in my rosters

         GET      /players/public(.:format)                                     players#public

  Get a list of players for an unauthenticated user

         GET      /players/for_roster/:id(.:format)                             players#for_roster

  List players in a roster

         GET      /players(.:format)                                            players#index

  List players available to a roster

         GET      /markets(.:format)                                            markets#index

  List upcoming markets available for entry

         GET      /markets/:id(.:format)                                        markets#show

  Get the representation for a market

         GET      /events/for_players(.:format)                                 events#for_players

  Get game events for the players

 JSON    POST     /push_devices(.:format)                                       push_devices#create

  Register a new push device (for sending notifications)

 JSON    GET      /                         devise/oauth2_providable/authorizations#new
 JSON    POST     /authorizations(.:format) devise/oauth2_providable/authorizations#create
 JSON    GET|POST /authorize(.:format)      devise/oauth2_providable/authorizations#new
 JSON    POST     /token(.:format)          devise/oauth2_providable/tokens#create

  Oauth endpoints for client authorization
